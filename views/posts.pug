extends index

block append stylesheets
    link(rel='stylesheet', href='/css/posts_styles.css')
    link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css' crossorigin='anonymous')

block append headScripts
    script(src='https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js' crossorigin='anonymous')
    script(src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js" crossorigin='anonymous')
    script(src="https://cdn.jsdelivr.net/npm/dayjs@1/plugin/relativeTime.js" crossorigin='anonymous')

block append scripts
    script(type='module', src='/js/posts.js')


block content 
    .container
        .options.d-flex.align-items-center.justify-content-center
            .dropdown.me-3
                button.btn.btn-info.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded='false')
                    i(class="ph-sort-descending icon-3 me-2")
                    span.fs-4.me-2 Sort Posts by
                ul.dropdown-menu 
                    li#sortBy_postedAt(class=`dropdown-item ${ sortBy == 'postedAt' ? 'activeOption' : '' }`, data-by='-postedAt')
                        i(class="ph-clock icon-3")
                        span Latest Posts
                    li#sortBy_likes(class=`dropdown-item ${ sortBy == 'likes' ? 'activeOption' : '' }`, data-by='-likes')
                        i(class="las la-thumbs-up icon-3")
                        span Highest Likes
                    li#sortBy_comments(class=`dropdown-item ${ sortBy == 'comments' ? 'activeOption' : '' }`, data-by='-comments')
                        i(class="las la-comment icon-3")
                        span Highest Comments
            .addPostBtn.ms-3
                button.btn.btn-success#addPostBtn(type='button') 
                    i(class="ph-plus-circle icon-3 me-2")
                    span.fs-4 Add New Post
    .container.mt-4#posts-container
        - let idx = 0
        each post in posts
            .post.bg-white.w-75.p-3.pt-0.mb-4.ms-auto.me-auto(id=`${post._id}`)
                .postHeader
                    .profilePhoto
                        - const author = post.username;
                        - const profilePhoto = profilePhotosMap.get(author);
                        img.img-fluid.rounded(src=`${profilePhoto}`, alt=`${author}`)
                    .authorDetails.mt-3
                        p
                            a.fs-4(href='profile of user')= author
                        p.fs-6.postedAt= post.postedAt
                .postBody.p-3
                    -
                        const textRegex = /text/i;
                        const imageRegex = /image/i;
                        const videoRegex = /video/i;
                        const type = post.contentType;
                        const hasText = textRegex.test(type);
                        const hasImages = imageRegex.test(type);
                        const hasVideo = videoRegex.test(type);
                    - if(hasText)
                        .text
                            p.fs-6= post.content
                    .hashTags
                        each hashTag in post.hashTags
                            a.fs-4(href=hashTag.slice(1), target='_blnk')
                    - if(hasImages)
                        .swiper.images
                            .swiper-wrapper
                                each image in post.images
                                    .swiper-slide
                                        img(src=`${image}`, alt='Image Not Available.')
                                    //- .swiper-slide
                                    //-     img(src=`${image}`, alt='Image Not Available.')                                    
                            .swiper-pagination
                            .swiper-button-next
                            .swiper-button-prev
                            .swiper-scrollbar
                    - if(hasVideo)
                        .video
                            video(controls='controls', src=`${post.video}`, type='video/mp4', controlslist='nodownload') 
                                h2.text-danger Your browser doesnt support embedded videos 
                h3 HashTags
                  br
                  - let i = 0;
                  each hashTag in post['hashTags'] 
                    if i!=0
                      a.hashTagLink(href=`search?type=posts&searchQuery=${hashTag.slice(1)}`)= ',' + hashTag
                    if i==0
                      a.hashTagLink(href=`search?type=posts&searchQuery=${hashTag.slice(1)}`)= hashTag
                    - i++
                - let noOfComments;
                .postFooter.mt-3
                    .postOptions.d-flex.align-items.center
                        .btn-group.dropup
                            button.btn.btn-info.reactions.me-3.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded='false')
                                i(class="las la-thumbs-up icon-3 me-2")
                                span.fs-4 Reactions
                            ul#reactions.dropdown-menu.reactionsOptions
                                -
                                    const iconsMap = new Map();
                                    iconsMap.set('like', 'las la-thumbs-up')
                                    iconsMap.set('dislike', 'las la-thumbs-down')
                                    iconsMap.set('love', 'ph-heart')
                                    iconsMap.set('funny', 'las la-laugh-squint')
                                    iconsMap.set('angry', 'lar la-angry')
                                    iconsMap.set('wow', 'lar la-surprise')
                                    iconsMap.set('sad', 'las la-frown')
                                
                                - for(const [key, value] of post.reactionsCnt)
                                    - if(key != 'comments')
                                        - console.log("Reactions Idx: ", reactions[idx]);
                                        if reactions[idx].reacted && reactions[idx].type == key
                                            li.dropdown-item.mt-1.selected(id=key, onclick=`javascript:sendRequest('${post.id}','${key}',true,${reactions[idx].reacted},'${reactions[idx].id}');`)
                                                span.d-flex.align-items-center
                                                    i(class=`${iconsMap.get(key)} icon-3 me-2`, onclick=`javascript:sendRequest('${post.id}','${key}',true,${reactions[idx].reacted},'${reactions[idx].id}');`)
                                                    | #{key}
                                                span(class='badge rounded-pill text-bg-primary me-2')= value
                                        else 
                                            li.dropdown-item.mt-1(id=key, onclick=`javascript:sendRequest('${post.id}','${key}',false,${reactions[idx].reacted},'${reactions[idx].id}');`)
                                                span.d-flex.align-items-center
                                                    i(class=`${iconsMap.get(key)} icon-3 me-2`, onclick=`javascript:sendRequest('${post.id}','${key}',false,${reactions[idx].reacted},'${reactions[idx].id}');`)
                                                    | #{key}
                                                span(class='badge rounded-pill text-bg-primary me-2')= value
                                    - if(key == 'comments')
                                        - noOfComments = value
                        button.btn.btn-info.comments(data-postid=`${post._id}`)
                            i(class="las la-comment icon-3 me-2")
                            span.fs-4= noOfComments+' Comments'
    
            - idx = idx + 1      
    .container.mt-4.mb-4.d-flex.justify-content-between.align-items-center#posts-pagination-controls
        button.btn.btn-success#prevPage
            i(class="ph-arrow-circle-left icon-3 me-3")
            span.fs-4 Previous Page
        - if(pagesCnt === 0) { currentPage = 0; }
        .fs-4#pageIndicator(data-currentpage=currentPage, data-pagescnt=pagesCnt) Page #{currentPage} / #{pagesCnt}
        button.btn.btn-success#nextPage
            span.fs-4 Next Page
            i(class="ph-arrow-circle-right icon-3 ms-3")

        script.
            const makeAPICall = async function(endpoint, method, data, multipartForm = false) {
                const fetchOptions = { method };
                if(method === 'POST' || method === 'PATCH') {
                    fetchOptions.body = data;
                    if(!multipartForm) {
                        fetchOptions.body = JSON.stringify(fetchOptions.body);
                        fetchOptions.headers = {
                            'Content-Type': 'application/json'
                        };
                    }
                }
                console.log(`About to make API call to ${method}: ${endpoint}`);
                try {
                    const res = await fetch(endpoint, fetchOptions);
                    const responseData = await res.json();
                    console.log('Received Response from API');
                    console.log(responseData);
                    return responseData;
                } catch (err) {
                    console.log('Error while making API Call');
                    console.log(err);
                    return err;
                }
            };
            async function sendRequest(id,type,selected,reacted,reactionId){
                console.log('I have been called')
                if(selected){
                    console.log('i have been selected')
                //we need to delete the current reaction
                    let url = `/api/v1/posts/${id}/reactions/${reactionId}`;
                    //- let url = `http://localhost:4000/api/v1/posts/${id}/reactions/${reactionId}`;
                    let method = 'DELETE'
                    const response = await makeAPICall(url,method)
                    if(response.status && response.status === 'success'){
                        //showToast('success', 'Reaction deleted....', 5);
                        location.reload();
                    } 
                    else {
                        alert(response.message);
                    }
                }
                else if(reacted){
                //we need to modify the reaction, we need the id
                    let url = `/api/v1/posts/${id}/reactions/${reactionId}?type=${type}`;
                    //- let url = `http://localhost:4000/api/v1/posts/${id}/reactions/${reactionId}?type=${type}`;
                    let method = 'PATCH'
                    const response = await makeAPICall(url,method)
                    if(response.status && response.status === 'success'){
                        //showToast('success', 'Reaction updated....', 5);
                        location.reload();
                    } 
                    else {
                        alert(response.message);
                    }
                }
                else{
                //we need to make a new reaction
                    let url = `/api/v1/posts/${id}/reactions?type=${type}`;
                    //- let url = `http://localhost:4000/api/v1/posts/${id}/reactions?type=${type}`;
                    let method = 'POST'
                    const response = await makeAPICall(url,method)
                    if(response.status && response.status === 'success'){
                        //showToast('success', 'Reaction deleted....', 5);
                        location.reload();
                    } 
                    else {
                        alert(response.message);
                    }
                }
            }